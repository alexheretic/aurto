#!/usr/bin/env bash
## aurto commands, see bottom help output

set -eu
version="0.7.9"
command=${1:-}
arg1=${2:-}

if [[ $EUID -eq 0 ]]; then
  # shouldn't be run as root
  user=$(cat /usr/lib/aurto/user)
  exec sudo -u "$user" "$0" "$@"
fi

bin_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
lib_dir="$bin_dir/../lib/aurto"
# shellcheck source=../lib/aurto/shared-functions disable=SC1091
source "$lib_dir/shared-functions"

function aurto_sync { sudo pacsync aurto >/dev/null; }

function check_new_package_trust {
  local mistrust
  local not_in_aur
  local mistrusted_users

  if [ -f /etc/aurto/trusted-users ]; then
    echo "aurto: Checking maintainer trust..." >&2
  else
    echo "aurto: Checking maintainer trust... $(dim disabled)" >&2
  fi

  mistrust=$("$lib_dir"/trust-check "${@:1}")
  if [ -z "$mistrust" ]; then
    if [ -f /etc/aurto/trusted-users ]; then
      rm_last_print
      echo "aurto: Checking maintainer trust... $(green âœ“)" >&2
    fi
  else
    not_in_aur=$(not_in_aur_packages "$mistrust")
    if [ -n "$not_in_aur" ]; then
      rm_last_print
      echo "aurto: Package not in AUR: $(yellow "$not_in_aur")" >&2
      exit 1
    fi

    mistrusted_users=$(new_line_to_space_separated_unique "$(echo "$mistrust" | cut -d: -f2)")
    rm_last_print
    echo -n "aurto: Trust maintainer(s): $(bold "$mistrusted_users")? [y/N] " >&2

    if [[ $- != *i* ]]; then
      # not an interactive shell
      echo -n "n" >&2
      exit 1
    fi

    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo "aurto: Adding $(bold "$mistrusted_users") >> /etc/aurto/trusted-users" >&2
      # shellcheck disable=SC2001
      echo "$mistrusted_users" | sed -e 's/ /\n/g' >> /etc/aurto/trusted-users
    else
      exit 1
    fi
  fi
}

if [ "$command" == "add" ] && [ -n "$arg1" ]; then
  packages_and_deps=""
  for i in "${@:2}"; do
      packages_and_deps="$packages_and_deps
$(echo "$i" | aur depends | cut -f2 | sort | comm -12 - <(aur pkglist | sort))"
  done
  # shellcheck disable=SC2086
  check_new_package_trust $packages_and_deps
  aurto_sync
  echo "aurto: Running: $(dim aur sync --no-view --no-confirm ${chroot_arg:---no-ver} --database=aurto) $(cyan "${*:2}")" >&2
  "$lib_dir"/summerize-build aur sync --no-view --no-confirm ${chroot_arg:---no-ver} --database=aurto "${@:2}"
  aurto_sync
  echo -e "aurto: To install run: $(green pacman -Syu) $(cyan "${*:2}")" >&2

elif [ "$command" == "addpkg" ] && [ -n "$arg1" ]; then
  check_new_package_trust "${@:2}"
  echo "aurto: Running: $(dim repo-add /var/cache/pacman/aurto/aurto.db.tar) $(cyan "${*:2}")" >&2
  "$lib_dir"/summerize-build repo-add /var/cache/pacman/aurto/aurto.db.tar "${@:2}"
  for pkg in "${@:2}"; do
    cp "$pkg" /var/cache/pacman/aurto/
  done
  aurto_sync

elif [ "$command" == "remove" ] && [ -n "$arg1" ]; then
  removed=""
  for pkg in "${@:2}"; do
    remove_out=$(repo-remove /var/cache/pacman/aurto/aurto.db.tar "$pkg" 2>&1)
    if [[ $remove_out = *"ERROR"* ]]; then
      echo "aurto: $(cyan "$pkg") $(red not found)" >&2
    else
      rm -rf /var/cache/pacman/aurto/"$pkg"*.pkg.* || true
      removed="$pkg $removed"
    fi
  done
  if [ -n "$removed" ]; then
    echo -e "aurto: Removed $(cyan "$removed")" >&2
    aurto_sync
  fi

else
  echo "$(bold aurto) v$version: simple management tool for the 'aurto' repository"
  echo "  Usage: $(green aurto add)|$(green addpkg)|$(green remove) $(cyan PACKAGES...)"
  echo
  echo "  Examples"
  echo "  - add: build aur packages & dependencies, add them to the 'aurto' repo"
  echo "      $(green aurto add) $(cyan aurutils)"
  echo
  echo "  - remove: remove packages from the 'aurto' repo (does not uninstall)"
  echo "      $(green aurto remove) $(cyan aurutils)"
  echo
  echo "  - addpkg: add a prebuilt package to the 'aurto' repo"
  echo "      $(green aurto addpkg) $(cyan aurutils-1.5.3-8-any.pkg.tar.xz)"
  exit 1
fi
