#!/usr/bin/env bash
if test -t 1; then
  function bold { echo -e "\\e[1m$*\\e[0m"; }
  function green { echo -e "\\e[32m$*\\e[39m"; }
  function cyan { echo -e "\\e[36m$*\\e[39m"; }
  function red { echo -e "\\e[31m$*\\e[39m"; }
  function yellow { echo -e "\\e[33m$*\\e[39m"; }
  function dim { echo -e "\\e[2m$*\\e[22m"; }
  function rm_last_print {
    printf "\\033[1A"  # move cursor one line up
    printf "\\033[K"  # delete till end of line
  }
else
  function bold { echo -e "$*"; }
  function green { bold "$@"; }
  function cyan { bold "$@"; }
  function red { bold "$@"; }
  function yellow { bold "$@"; }
  function dim { bold "$@"; }
  function rm_last_print { return; }
fi

## Returns epoch date of the latest modified time of a aurto package
function last_pkg_modify {
  stat $1/*.pkg.tar* -c '%Y' 2>/dev/null | sort | tail -n1 | tr -d '\n'
}

## Takes '\n' separated things and returns a ' ' separated unique sequence (no empties)
function new_line_to_space_separated_unique {
  local space_sep=""

  while read -r line; do
    if [ -n "$line" ] && [[ $space_sep != *" $line "* ]]; then
      space_sep="$space_sep $line "
    fi
  done <<< "$1"

  echo "$space_sep" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | tr -s ' '
}

## Works on trust-check output returning packages that are not/no longer in AUR
function not_in_aur_packages {
  local packages=""

  while read -r line; do
    if [ -n "$line" ] && [[ $line = *"::not-in-aur"* ]]; then
      packages="$packages $(echo "$line" | cut -d':' -f1)"
    fi
  done <<< "$1"

  echo "$packages" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | tr -s ' '
}

## Loads a config file into bash variables
function load_configs {
  local CFG=${2:-CFG} 
  local line
  local CFGid=-1
  local section=''
  local key
  local val
  shopt -s extglob
  
  while read -r line; do
    line="${line%%\#*}" # remove in line right comments
    line="${line##*( )}" # remove leading whitespaces
    line="${line%%*( )}" # remove trailing whitespaces
    line="$(echo "$line" | sed 's/ *= */=/g')"
    if [[ $line = \#* ]]; then continue; fi # ignore comments
  
    # check for section
    if [[ $line =~ \[.*\] ]]; then
      CFGid=$((CFGid+1))
      section="$CFG$CFGid"
      
      #echo "declare -A $section=([\"section_name\"]=\"$(echo "$line" | tr -d '[]' )\")"
      declare -Ag "$section=([\"section_name\"]=\"$(echo "$line" | tr -d '[]' )\")"
      
      continue
    fi
    
    key="${line%=*}"
    val="${line#*=}"
    
    if [ -z "$key" ]; then continue; fi

    if [ -z "$section" ]; then
      #echo "declare -g \"$key=$val\""
      declare -g "$key=$val"
    else
      #echo "declare -Ag \"$section[$key]=$val\""
      declare -Ag "$section[$key]=$val"
    fi
  done < "$1"
  #echo "declare -g $CFG""total=$((CFGid+1))"
  declare -g "$CFG""total=$((CFGid+1))"
  shopt -u extglob
}

## Checks if a given string is considered true or false (canse-insensitive)
function cfgistrue {
  local trues=('yes' 'y' 'true' 't' 'enable' 'enabled')
  local t=''
  for t in "${trues[@]}"; do
    if [ "$t" == "${1,,}" ]; then return $(true); fi
  done
  return $(false)
}

load_configs "/etc/aurto/aurto.conf"
